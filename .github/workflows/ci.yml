name: BitNET CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests and Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.x'
        channel: 'stable'
        cache: true
        
    - name: Verify Flutter installation
      run: flutter --version
      
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify dependencies
      run: flutter pub deps
      
    - name: Analyze code quality
      run: flutter analyze --fatal-infos --fatal-warnings
      
    - name: Check code formatting
      run: dart format --set-exit-if-changed .
      
    - name: Run all unit tests
      run: flutter test test/run_all_unit_tests.dart --coverage
      
    - name: Run specific test suites
      run: |
        echo "Running Currency Converter Tests..."
        flutter test test/unit/currency/currency_converter_test.dart
        
        echo "Running Bitcoin Validation Tests..."
        flutter test test/unit/bitcoin/bitcoin_validation_test.dart
        
        echo "Running Lightning Receive Tests..."
        flutter test test/unit/receive/lightning_receive_unit_test.dart
        
        echo "Running Receive Logic Tests..."
        flutter test test/unit/receive/receive_logic_test.dart
        
        echo "Running Model Tests..."
        flutter test test/unit/models/bitcoin_models_test.dart
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
        
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.x'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK (Debug)
      run: flutter build apk --debug
      
    - name: Build APK (Release)
      run: flutter build apk --release
      
    - name: Build App Bundle
      run: flutter build appbundle --release
      
    - name: Upload debug APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk
        
    - name: Upload release APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Upload app bundle artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-bundle
        path: build/app/outputs/bundle/release/app-release.aab

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.x'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run dependency audit
      run: flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name'
      continue-on-error: true
      
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for common Flutter security issues..."
        
        # Check for hardcoded secrets (basic patterns)
        echo "Scanning for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" lib/ --include="*.dart" | grep -v "// " | grep -v "/// "; then
          echo "⚠️ Potential hardcoded secrets found. Please review."
        else
          echo "✅ No obvious hardcoded secrets detected."
        fi
        
        # Check for insecure HTTP usage
        echo "Checking for insecure HTTP usage..."
        if grep -r "http://" lib/ --include="*.dart"; then
          echo "⚠️ Insecure HTTP URLs found. Consider using HTTPS."
        else
          echo "✅ No insecure HTTP URLs found."
        fi
      continue-on-error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.x'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run Lightning receive integration tests
      run: flutter test test/integration/receive/lightning_receive_test.dart
      continue-on-error: true
      
    - name: Run onchain receive integration tests  
      run: flutter test test/integration/receive/onchain_receive_test.dart
      continue-on-error: true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, security, integration-test]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All critical checks passed!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some critical checks failed!" >> $GITHUB_OUTPUT
        fi
        
    - name: Output summary
      run: |
        echo "## BitNET CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration**: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY