import 'package:bitnet/backbone/helper/theme/theme.dart';import 'package:bitnet/backbone/services/timezone_provider.dart';import 'package:bitnet/components/loaders/loaders.dart';import 'package:bitnet/models/postmodels/post_component.dart';import 'package:bitnet/pages/other_profile/other_profile_controller.dart';import 'package:bitnet/pages/profile/profile_controller.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:go_router/go_router.dart';import 'package:provider/provider.dart';import 'package:timezone/timezone.dart';class ColumnViewTab extends StatefulWidget {  const ColumnViewTab({Key? key, this.other = false}) : super(key: key);  final bool other;  @override  State<ColumnViewTab> createState() => _ColumnViewTabState();}class _ColumnViewTabState extends State<ColumnViewTab> {  late final controller;  @override  void initState() {    super.initState();    controller = widget.other        ? Get.find<OtherProfileController>()        : Get.put(ProfileController());  }  @override  Widget build(BuildContext context) {    return Obx(      () {        return !controller.isLoading.value && controller.assets.isEmpty            ? SliverToBoxAdapter(                child: Padding(                  padding: const EdgeInsets.all(10.0),                  child: Row(                    mainAxisAlignment: MainAxisAlignment.center,                    children: [                      const Icon(Icons.error),                      const SizedBox(width: AppTheme.cardPadding),                      Text(                        'No assets found',                        style: Theme.of(context).textTheme.bodyLarge,                      ),                    ],                  ),                ),              )            : Obx(                () => SliverList.builder(                  itemCount: controller.assetsLazyLoading.length + 1,                  itemBuilder: (context, index) {                    if (index < controller.assetsLazyLoading.length) {                      final asset = controller.assetsLazyLoading[index];                      final assetId = asset.assetGenesis?.assetId ?? '';                      final meta = controller.assetMetaMap[assetId];                      print("Asset ID123: $assetId");                      return GestureDetector(                        onTap: () {                          context.go(                            "/asset_screen/$assetId",                          );                          // context.goNamed('asset_screen', pathParameters: {                          //   'nft_id': assetId,                          // });                        },                        child: PostComponent(                          postId: assetId,                          ownerId:                              "${controller.userData.value.username}" ?? '',                          displayname:                              "${controller.userData.value.displayName}" ?? '',                          username:                              "${controller.userData.value.username}" ?? '',                          postName: asset.assetGenesis?.name ?? '',                          rockets: {},                          medias: meta != null ? meta.toMedias() : [],                          timestamp: DateTime.fromMillisecondsSinceEpoch(                              asset.lockTime! * 1000),                        ),                      );                    } else {                      // Show loader at the end                      return controller.assetsLoading.value                          ? Padding(                              padding: const EdgeInsets.all(8.0),                              child: Center(                                child: dotProgress(context),                              ),                            )                          : const SizedBox.shrink();                    }                  },                ),              );      },    );  }}